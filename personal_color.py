# -*- coding: utf-8 -*-
"""personal color.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11znYc5h67QoidTGVVb0CuEAMecwBet3F
"""

import pandas as pd

df = pd.read_csv('color.csv')

print(df)

print(df[['season', 'code','R','G','B']])

df.tail(5)

#encode
# Perform one-hot encoding on the 'season' column
df_encoded = pd.get_dummies(df.drop(columns=['Unnamed: 5']), columns=['season'])

df_encoded.head()

pip install xgboost

import numpy as np
import pandas as pd
def augment_color_data(df, n_samples=500, noise_factor=20):

#ทำ Data Augmentation
    augmented_data = []

    for _ in range(n_samples):
        # สุ่มเลือกแถวจาก DataFrame
        row = df.sample(1).iloc[0]

        # ดึงค่าเดิม
        season = row['season']
        code = row['code']
        r, g, b = row['R'], row['G'], row['B']

        # ทำ Color Jittering: ปรับค่า R, G, B แบบสุ่มในช่วง noise_factor
        r_aug = np.clip(r + np.random.randint(-noise_factor, noise_factor), 0, 255)
        g_aug = np.clip(g + np.random.randint(-noise_factor, noise_factor), 0, 255)
        b_aug = np.clip(b + np.random.randint(-noise_factor, noise_factor), 0, 255)

        # เพิ่มข้อมูลใหม่ในรูปแบบ dictionary
        augmented_data.append({
            'season': season,
            'code': code,
            'R': r_aug,
            'G': g_aug,
            'B': b_aug
        })

    # สร้าง DataFrame ใหม่
    augmented_df = pd.DataFrame(augmented_data)

    return pd.concat([df, augmented_df], ignore_index=True)

# Changed 'data' to 'df'
augmented_df = augment_color_data(df, n_samples=170)
augmented_df.head()

# บันทึกลง CSV
augmented_df.to_csv('augmented_color_data.csv', index=False)
print("Data saved to augmented_color_data.csv")

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.preprocessing import LabelEncoder, StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns

# 1. อ่านข้อมูลจาก CSV
df = pd.read_csv('augmented_color_data.csv')

# ตรวจสอบข้อมูล
print("Sample Data:")
print(df.head())

X = df[['R', 'G', 'B']]   # Features
y = df['season']          # Labels

# 3.แปลง Labels (season) เป็นตัวเลข
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)

# 4. 80% Train, 20% Test
X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)

# 5. ปรับขนาดข้อมูล (Standardization) เพื่อช่วย SVM
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# 6. สร้างและเทรนโมเดล SVM
svm_model = SVC(kernel='rbf', C=1.0, gamma='scale', random_state=42)
svm_model.fit(X_train, y_train)

# 7. ทำนายผลและประเมินโมเดล
y_pred = svm_model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")

# 8. Classification Report
print("\nClassification Report:")
print(classification_report(y_test, y_pred, target_names=label_encoder.classes_))

# 9. Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, cmap='Blues', xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_)
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

# แบ่งข้อมูล Train, Validation, และ Test
X_train, X_temp, y_train, y_temp = train_test_split(X, y_encoded, test_size=0.3, random_state=42)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)

# ปรับขนาดข้อมูล
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_val = scaler.transform(X_val)
X_test = scaler.transform(X_test)

# สร้างและเทรนโมเดล
svm_model = SVC(kernel='rbf', C=1.0, gamma='scale', random_state=42)
svm_model.fit(X_train, y_train)

# ประเมินผลด้วย Validation Set
y_val_pred = svm_model.predict(X_val)
val_accuracy = accuracy_score(y_val, y_val_pred)
print(f"Validation Accuracy: {val_accuracy:.2f}")

# ประเมินผลด้วย Test Set
y_test_pred = svm_model.predict(X_test)
test_accuracy = accuracy_score(y_test, y_test_pred)
print(f"Test Accuracy: {test_accuracy:.2f}")

# Classification Report สำหรับ Test Set
print("\nClassification Report (Test Set):")
print(classification_report(y_test, y_test_pred, target_names=label_encoder.classes_))

# Confusion Matrix สำหรับ Test Set
conf_matrix_test = confusion_matrix(y_test, y_test_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix_test, annot=True, cmap='Blues', xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_)
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix (Test Set)")
plt.show()

from sklearn.model_selection import GridSearchCV

param_grid = {
    'C': [0.1, 1, 10],
    'kernel': ['linear', 'rbf', 'poly'],
    'gamma': ['scale', 'auto']
}

grid_search = GridSearchCV(SVC(), param_grid, scoring='accuracy', cv=5)
grid_search.fit(X_train, y_train)

print("Best Parameters:", grid_search.best_params_)
print("Best Accuracy:", grid_search.best_score_)